[{"C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\index.js":"1","C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\App.js":"2","C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\reportWebVitals.js":"3","C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\Components\\Snake\\Snake.js":"4","C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\Components\\SnakeFood\\SnakeFood.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":4714,"mtime":1607949123643,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":345,"mtime":1607889741333,"results":"10","hashOfConfig":"7"},{"size":285,"mtime":1607865690665,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dybudx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\index.js",[],["24","25"],"C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\App.js",["26"],"import React, { Component } from 'react';\nimport Snake from './Components/Snake/Snake';\nimport SnakeFood from './Components/SnakeFood/SnakeFood';\nimport { BsChevronUp, BsChevronDown, BsChevronLeft, BsChevronRight } from 'react-icons/bs';\nimport './App.css';\n\nconst getRandomCoordsForFood = snakeCoords => {\n  const max = 30;\n  let x, y, randomNumber;\n  do {\n    x = Math.ceil(Math.random() * Math.ceil(max));\n    y = Math.ceil(Math.random() * Math.ceil(max));\n    randomNumber = snakeCoords.findIndex(coord => {\n      return coord[0] === x && coord[1] === y;\n    });\n  } while (randomNumber + 1);\n  return [x, y];\n}\n\nconst initialState = {\n  snakeFood: getRandomCoordsForFood([5, 16]),\n  direction: 'RIGHT',\n  snakeSpeed: 100,\n  gamePlay: false,\n  snakeCoords: [\n    [5, 16]\n  ]\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.snakeSpeed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.outOfBorderCheck();\n    this.snakeEatsItselfHandler();\n    this.checkIfEaten();\n  }\n\n  onKeyDown = e => {\n    const { direction } = this.state;\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38: this.setDirection('UP', direction !== 'DOWN'); break;\n      case 40: this.setDirection('DOWN', direction !== 'UP'); break;\n      case 37: this.setDirection('LEFT', direction !== 'RIGHT'); break;\n      case 39: this.setDirection('RIGHT', direction !== 'LEFT'); break;\n      default: return;\n    }\n  }\n\n\n  onButtonDown = turn => {\n    const { direction } = this.state;\n    switch (turn) {\n      case 'UP': this.setDirection('UP', direction !== 'DOWN'); break;\n      case 'DOWN': this.setDirection('DOWN', direction !== 'UP'); break;\n      case 'LEFT': this.setDirection('LEFT', direction !== 'RIGHT'); break;\n      case 'RIGHT': this.setDirection('RIGHT', direction !== 'LEFT'); break;\n      default: return;\n    }\n  }\n\n  setDirection = (direction, directionCheck) => {\n    if (directionCheck) {\n      this.setState({ direction: direction });\n      setTimeout(() => {\n        this.moveSnake();\n      }, 10);\n    }\n  }\n\n  moveSnake = () => {\n    let coords = [...this.state.snakeCoords];\n    let head = coords[coords.length - 1];\n    switch (this.state.direction) {\n      case 'RIGHT': head = [head[0] + 1, head[1]]; break;\n      case 'LEFT': head = [head[0] - 1, head[1]]; break;\n      case 'DOWN': head = [head[0], head[1] + 1]; break;\n      case 'UP': head = [head[0], head[1] - 1]; break;\n      default: head = [head[0], head[1]]; break;\n    }\n    coords.push(head);\n    coords.shift();\n    this.setState({ snakeCoords: coords });\n  }\n\n  outOfBorderCheck = () => {\n    let head = this.state.snakeCoords[this.state.snakeCoords.length - 1];\n    if (head[0] > 31 || head[1] > 31 || head[0] <= 0 || head[1] <= 0) {\n      this.onGameOver();\n    }\n  }\n\n  snakeEatsItselfHandler = () => {\n    let snake = [...this.state.snakeCoords];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(coord => {\n      if (head[0] === coord[0] && head[1] === coord[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  onGameOver = () => {\n    alert(`Game Over, You scored ${this.state.snakeCoords.length}`);\n    this.setState(initialState);\n  }\n\n  checkIfEaten = () => {\n    let snake = [...this.state.snakeCoords];\n    let head = this.state.snakeCoords[this.state.snakeCoords.length - 1];\n    let food = this.state.snakeFood;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({ snakeFood: getRandomCoordsForFood(snake) });\n      this.expandSnake();\n    }\n  }\n\n  expandSnake = () => {\n    let newSnake = [ ...this.state.snakeCoords ];\n    newSnake.unshift([]);\n    this.setState({ snakeCoords: newSnake });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"snakeScore\">\n          <h3>Score: <b>{this.state.snakeCoords.length}</b></h3>\n        </div>\n        <div id=\"gameBoard\">\n          <Snake snakeCoords={this.state.snakeCoords}/>\n          <SnakeFood snakeFood={this.state.snakeFood}/>\n        </div>\n        <div className=\"buttonGrid\">\n          <button style={{ gridRowStart: 1, gridColumnStart: 2 }} onClick={() => this.onButtonDown('UP')}><BsChevronUp /></button>\n          <button style={{ gridRowStart: 2, gridColumnStart: 1 }} onClick={() => this.onButtonDown('LEFT')}><BsChevronLeft /></button>\n          <button style={{ gridRowStart: 2, gridColumnStart: 3 }} onClick={() => this.onButtonDown('RIGHT')}><BsChevronRight /></button>\n          <button style={{ gridRowStart: 3, gridColumnStart: 2 }} onClick={() => this.onButtonDown('DOWN')}><BsChevronDown /></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\reportWebVitals.js",[],"C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\Components\\Snake\\Snake.js",[],"C:\\Users\\charlie.jeffries-tip\\snake-game\\src\\Components\\SnakeFood\\SnakeFood.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":13,"column":42,"nodeType":"33","messageId":"34","endLine":15,"endColumn":6},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'x', 'y'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]